#pre-requisites of this exercise are:
#1. You should create a service account, here it refers to a GCP IAM service account that would be used by
#   your application to access a GCP managed service such as Cloud Pub/Sub.
#2. Once service account is created, assign it roles as needed, here a Pub/Sub role is only representational, the deployed pod does not
#   do anything as such but just to demonstrate how service account key files can be mounted as Pod Volumes using K8 secrets.
#3. Download the .json file and then rename it to credentials.json.
#4. Use the cloud shell to upload the credentials.json to your root directory.
#5. Use the below gcloud command to create a starndard zonal cluster in your project.
#6. gcloud container clusters create <name of the cluster> --zone <compute zone where you want to create, e.g. us-central1-a>
#7. After the cluster is created next step is to update the kubeconfig file in your root with the cluster credentials so as to execute the kubectl commands.
#8. gcloud container clusters get-credentials <cluster name>
#9. It's recommended that you create a namespace before exercising stuff so as to clearly seprate the K8 objetcs while exercising.
#10.Run command kubectl create ns <my namespace>
#11.Now create a kubernetes secret in the namespace kubectl create secret generic pub-sub-svc-account-keys --from-file=credentials.json -n <namespace>
#12.At this point you have the secret created and ready to be used by your pod.
#13.If you want to see the secret got created or not, kubectl get secrets -n <namespace>
#14.See the details of your secrets, kubectl describe secret pub-sub-svc-account-keys -n <namespace>
#15.See the secret in yaml format kubectl get secret pub-sub-svc-account-keys -o yaml -n <namespace>
#16.If you want to persist the yaml and make more changes on the fly kubectl get secret pub-sub-svc-account-keys -o yaml >> mysecrettemp.yaml
#17.At this point you can go ahead and create the pod kubectl create -f create-pod-inject-secrets-as-volume-mounts.yaml -n <namespace>.
#18.Remember to use the -n option to specify the namespace else K8 will attempt in default namespace where your secret does not exist.
apiVersion: v1
kind: Pod
metadata:
  name: secret-as-file-mount
  labels:
    app: webserver
    type: frontend
spec:
  containers:
    - name: nginx-web
      image: nginx:latest
      volumeMounts:
        - name: svc-account-volume
          mountPath: /etc/config/svcaccount
          readOnly: true
  volumes:
    - name: svc-account-volume
      secret:
        secretName: pub-sub-svc-account-keys
        